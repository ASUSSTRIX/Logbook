package com.ust.project.onboarding.serviceImpl;

import com.ust.project.onboarding.dto.VisitorDTO;
import com.ust.project.onboarding.entity.Visitor;
import com.ust.project.onboarding.enums.FacilityType;
import com.ust.project.onboarding.enums.VisitorStatus;
import com.ust.project.onboarding.enums.VisitorType;
import com.ust.project.onboarding.exceptions.VisitorNotFoundException;
import com.ust.project.onboarding.mapper.VisitorMapper;
import com.ust.project.onboarding.repository.VisitorRepository;
import com.ust.project.onboarding.service.VisitorService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.List;
import java.util.Optional;

@Service
public class VisitorServiceImpl implements VisitorService {

    @Autowired
    private VisitorRepository visitorRepository;

    @Autowired
    private VisitorMapper visitorMapper;

    @Override
    public Visitor createVisitor(VisitorDTO visitorDTO) {
        Visitor visitor = visitorMapper.toEntity(visitorDTO);
        return visitorRepository.save(visitor);
    }

    @Override
    public List<Visitor> getAllVisitors() {
        return visitorRepository.findAll();
    }

    @Override
    public Optional<Visitor> getVisitorById(String id) {
        return visitorRepository.findById(id);
    }

    @Override
    public Visitor updateVisitor(String id, VisitorDTO visitorDTO) {
        Optional<Visitor> existingVisitor = visitorRepository.findById(id);
        if (existingVisitor.isPresent()) {
            Visitor visitor = visitorMapper.toEntity(visitorDTO);
            visitor.setId(id);
            visitor.setCreatedAt(existingVisitor.get().getCreatedAt());
            visitor.setUpdatedAt(LocalDateTime.now());
            return visitorRepository.save(visitor);
        } else {
            throw new VisitorNotFoundException("Visitor not found with id: " + id);
        }
    }

    @Override
    public void deleteVisitor(String id) {
        if (visitorRepository.existsById(id)) {
            visitorRepository.deleteById(id);
        } else {
            throw new VisitorNotFoundException("Visitor not found with id: " + id);
        }
    }

    @Override
    public List<Visitor> getVisitorsByType(VisitorType visitorType) {
        return visitorRepository.findByVisitorType(visitorType);
    }

    @Override
    public List<Visitor> getVisitorsByFacility(FacilityType facility) {
        return visitorRepository.findByFacility(facility);
    }

    @Override
    public List<Visitor> getVisitorsByDate(LocalDate date) {
        return visitorRepository.findByDate(date);
    }

    @Override
    public Visitor checkoutVisitor(String id, String outTime) {
        Optional<Visitor> existingVisitor = visitorRepository.findById(id);
        if (existingVisitor.isPresent()) {
            Visitor visitor = existingVisitor.get();
            visitor.setOutTime(LocalTime.parse(outTime));
            visitor.setStatus(VisitorStatus.CHECKED_OUT);
            visitor.setUpdatedAt(LocalDateTime.now());
            return visitorRepository.save(visitor);
        } else {
            throw new VisitorNotFoundException("Visitor not found with id: " + id);
        }
    }


}
