import React from 'react';
import { useNavigate } from 'react-router-dom';

export default function EmployeeProcessManagement() {
  const navigate = useNavigate();
  const [formData, setFormData] = React.useState({
    visitorType: '',
    visitorId: '',
    visitorName: '',
    purposeOfVisit: '',
    phoneNumber: '',
    email: '',
    date: '',
    inTime: '',
    addFacility: ''
  });

  const [errors, setErrors] = React.useState({});
  const [isSubmitting, setIsSubmitting] = React.useState(false);
  const [submitMessage, setSubmitMessage] = React.useState('');

  // Get current date in YYYY-MM-DD format for date input min attribute
  const getCurrentDate = () => {
    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1).padStart(2, '0');
    const day = String(today.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  };
  
  const getCurrentTime = () => {
    const now = new Date();
    const hours = String(now.getHours()).padStart(2, '0');
    const minutes = String(now.getMinutes()).padStart(2, '0');
    return `${hours}:${minutes}`;
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    
    // Apply validation rules during input
    if (name === 'visitorName' || name === 'purposeOfVisit') {
      const onlyAlphabets = /^[A-Za-z\s]*$/;
      if (!onlyAlphabets.test(value) && value !== '') {
        setErrors({
          ...errors,
          [name]: 'Only alphabets and spaces are allowed'
        });
        return; 
      }
    }
    setFormData(prevState => ({
      ...prevState,
      [name]: value
    }));
    
    if (errors[name]) {
      setErrors({
        ...errors,
        [name]: ''
      });
    }
  };

  const validateForm = () => {
    const newErrors = {};
    const requiredFields = ['visitorType', 'visitorName', 'purposeOfVisit', 'phoneNumber', 'date', 'inTime', 'addFacility'];
    
    requiredFields.forEach(field => {
      if (!formData[field]) {
        newErrors[field] = 'This field is required';
      }
    });
    
    if (formData.visitorName && !/^[A-Za-z\s]+$/.test(formData.visitorName)) {
      newErrors.visitorName = 'Only alphabets and spaces are allowed';
    }
    
    if (formData.purposeOfVisit && !/^[A-Za-z\s]+$/.test(formData.purposeOfVisit)) {
      newErrors.purposeOfVisit = 'Only alphabets and spaces are allowed';
    }
    
    if (formData.phoneNumber && !/^\d{10}$/.test(formData.phoneNumber)) {
      newErrors.phoneNumber = 'Please enter a valid 10-digit phone number';
    }
    
    if (formData.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      newErrors.email = 'Please enter a valid email address';
    }
    
    const selectedDate = new Date(formData.date);
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    if (selectedDate < today) {
      newErrors.date = 'Cannot select a past date';
    }
   
    if (formData.date === getCurrentDate()) {
      const selectedTime = formData.inTime;
      const currentTime = getCurrentTime();
      
      if (selectedTime < currentTime) {
        newErrors.inTime = 'Cannot select a past time for today';
      }
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (validateForm()) {
      setIsSubmitting(true);
      setSubmitMessage('');
      
      try {
        const response = await fetch('http://localhost:8080/api/save', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem("token")}`,
          },
          body: JSON.stringify(formData),
        });
        
        const result = await response.json();
        
        if (response.ok && result.success) {
          setSubmitMessage('New entry created successfully!');
          
          // Store the visitor ID in localStorage for the edit page
          if (result.data && result.data.id) {
            localStorage.setItem('currentVisitorId', result.data.id);
            
            // Navigate to the edit page
            setTimeout(() => {
              navigate('/edit-employee');
            }, 1000);
          }
          
          handleCancel();
        } else {
          setSubmitMessage(`Error: ${result.message || 'Failed to create entry'}`);
        }
      } catch (error) {
        setSubmitMessage(`Error: ${error.message}`);
        console.error('Error submitting form:', error);
      } finally {
        setIsSubmitting(false);
      }
    }
  };

  const handleCancel = () => {
    setFormData({
      visitorType: '',
      visitorId: '',
      visitorName: '',
      purposeOfVisit: '',
      phoneNumber: '',
      email: '',
      date: '',
      inTime: '',
      addFacility: ''
    });
    setErrors({});
  };

  return (
    <form className="mx-auto w-full max-w-md" onSubmit={handleSubmit}>
      <div className="flex flex-col h-screen">
        <div className="flex-1 bg-slate-100 flex justify-center items-center p-4">
          <div className="bg-white rounded shadow-md w-full max-w-md p-6 mx-auto">
            <h2 className="text-center font-bold text-slate-800 mb-6">CREATE NEW ENTRY</h2>
            
            {submitMessage && (
              <div className={`p-3 mb-4 rounded ${submitMessage.includes('Error') ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700'}`}>
                {submitMessage}
              </div>
            )}
            
            <div className="space-y-4">
              {/* Form fields remain the same */}
              <div>
                <label className="block text-sm font-medium text-slate-700">
                  <span className="text-red-500">*</span>Visitor Type
                </label>
                <div className="mt-1 relative">
                  <select
                    name="visitorType"
                    value={formData.visitorType}
                    onChange={handleChange}
                    className={`block w-full rounded border-gray-300 border py-2 px-3 shadow-sm focus:border-blue-500 focus:ring-blue-500 appearance-none pr-10 ${errors.visitorType ? 'border-red-500' : ''}`}
                  >
                    <option value="" disabled></option>
                    <option value="employee">Employee</option>
                    <option value="visitor">Visitor</option>
                  </select>
                  <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                    <svg className="w-4 h-4" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
                    </svg>
                  </div>
                </div>
                {errors.visitorType && <p className="text-red-500 text-xs mt-1">{errors.visitorType}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-700">
                  Visitor ID
                </label>
                <input
                  type="text"
                  name="visitorId"
                  value={formData.visitorId}
                  onChange={handleChange}
                  disabled={formData.visitorType !== 'employee'}
                  className={`mt-1 block w-full rounded border-gray-300 border py-2 px-3 shadow-sm focus:border-blue-500 focus:ring-blue-500 ${formData.visitorType !== 'employee' ? 'bg-gray-100 cursor-not-allowed' : ''}`}
                  placeholder="F00011"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-700">
                  <span className="text-red-500">*</span>Visitor Name
                </label>
                <input
                  type="text"
                  name="visitorName"
                  value={formData.visitorName}
                  onChange={handleChange}
                  className={`mt-1 block w-full rounded border-gray-300 border py-2 px-3 shadow-sm focus:border-blue-500 focus:ring-blue-500 ${errors.visitorName ? 'border-red-500' : ''}`}
                />
                {errors.visitorName && <p className="text-red-500 text-xs mt-1">{errors.visitorName}</p>}
              </div>
              
              <div>
                <label className="block text-sm font-medium text-slate-700">
                  <span className="text-red-500">*</span>Purpose of Visit
                </label>
                <input
                  type="text"
                  name="purposeOfVisit"
                  value={formData.purposeOfVisit}
                  onChange={handleChange}
                  className={`mt-1 block w-full rounded border-gray-300 border py-2 px-3 shadow-sm focus:border-blue-500 focus:ring-blue-500 ${errors.purposeOfVisit ? 'border-red-500' : ''}`}
               
                />
                {errors.purposeOfVisit && <p className="text-red-500 text-xs mt-1">{errors.purposeOfVisit}</p>}
              </div>
              
              <div>
                <label className="block text-sm font-medium text-slate-700">
                  <span className="text-red-500">*</span>Phone Number
                </label>
                <input
                  type="tel"
                  name="phoneNumber"
                  value={formData.phoneNumber}
                  onChange={handleChange}
                  className={`mt-1 block w-full rounded border-gray-300 border py-2 px-3 shadow-sm focus:border-blue-500 focus:ring-blue-500 ${errors.phoneNumber ? 'border-red-500' : ''}`}
                  placeholder="10 digit number"
                />
                {errors.phoneNumber && <p className="text-red-500 text-xs mt-1">{errors.phoneNumber}</p>}
              </div>
              <div>
                <label className="block text-sm font-medium text-slate-700">
                  Email
                </label>
                <input
                  type="email"
                  name="email"
                  value={formData.email}
                  onChange={handleChange}
                  className={`mt-1 block w-full rounded border-gray-300 border py-2 px-3 shadow-sm focus:border-blue-500 focus:ring-blue-500 ${errors.email ? 'border-red-500' : ''}`}
                />
                {errors.email && <p className="text-red-500 text-xs mt-1">{errors.email}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-700">
                  <span className="text-red-500">*</span>Date
                </label>
                <div className="mt-1 relative">
                  <input
                    type="date"
                    name="date"
                    value={formData.date}
                    onChange={handleChange}
                    min={getCurrentDate()}
                    className={`block w-full rounded border-gray-300 border py-2 px-3 shadow-sm focus:border-blue-500 focus:ring-blue-500 ${errors.date ? 'border-red-500' : ''}`}
                  />
                </div>
                {errors.date && <p className="text-red-500 text-xs mt-1">{errors.date}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-700">
                  <span className="text-red-500">*</span>In Time
                </label>
                <input
                  type="time"
                  name="inTime"
                  value={formData.inTime}
                  onChange={handleChange}
                  min={formData.date === getCurrentDate() ? getCurrentTime() : null}
                  className={`mt-1 block w-full rounded border-gray-300 border py-2 px-3 shadow-sm focus:border-blue-500 focus:ring-blue-500 ${errors.inTime ? 'border-red-500' : ''}`}
                />
                {errors.inTime && <p className="text-red-500 text-xs mt-1">{errors.inTime}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-700">
                  <span className="text-red-500">*</span>Add Facility
                </label>
                <div className="mt-1 relative">
                  <select
                    name="addFacility"
                    value={formData.addFacility}
                    onChange={handleChange}
                    className={`block w-full rounded border-gray-300 border py-2 px-3 shadow-sm focus:border-blue-500 focus:ring-blue-500 appearance-none pr-10 ${errors.addFacility ? 'border-red-500' : ''}`}
                  >
                    <option value="" disabled></option>
                    <option value="bangalore">Bangalore</option>
                    <option value="trivandrum">Trivandrum</option>
                    <option value="kochi">Kochi</option>
                  </select>
                  <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                    <svg className="w-4 h-4" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
                    </svg>
                  </div>
                </div>
                {errors.addFacility && <p className="text-red-500 text-xs mt-1">{errors.addFacility}</p>}
              </div>

              <div className="flex justify-between pt-4">
                <button
                  type="submit"
                  disabled={isSubmitting}
                  className="bg-[#1f415b] text-white py-2 px-8 rounded-full hover:bg-slate-800 focus:outline-none focus:ring-2 focus:ring-slate-700 focus:ring-opacity-50 text-sm font-medium w-32 disabled:opacity-50"
                >
                  {isSubmitting ? 'Saving...' : 'Save'}
                </button>
                <button
                  type="button"
                  onClick={handleCancel}
                  className="bg-[#1f415b] text-white py-2 px-8 rounded-full hover:bg-slate-800 focus:outline-none focus:ring-2 focus:ring-slate-700 focus:ring-opacity-50 text-sm font-medium w-32"
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </form>
  );
}
