import { useState } from "react"

export default function EmployeeEditEntry() {
  // State for the visitor details (non-editable)
  const [visitorDetails, setVisitorDetails] = useState({
    visitorType: "Employee",
    visitorId: "EMP12345",
    visitorName: "John Doe",
    purposeOfVisit: "Meeting",
    phoneNumber: "1234567890",
    email: "john.doe@example.com",
    date: "2025-05-20",
    inTime: "09:30",
  })

  // State for the editable fields
  const [editableFields, setEditableFields] = useState({
    outTime: "",
    authorizedSignatory: "",
    addFacility: "",
    eSignature: null,
  })

  // State for validation errors
  const [errors, setErrors] = useState({})
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [submitMessage, setSubmitMessage] = useState("")

  // Signature canvas state
  const [isDrawing, setIsDrawing] = useState(false)
  const [signatureData, setSignatureData] = useState(null)

  // Handle change for editable fields
  const handleChange = (e) => {
    const { name, value } = e.target
    setEditableFields((prev) => ({
      ...prev,
      [name]: value,
    }))

    if (errors[name]) {
      setErrors({
        ...errors,
        [name]: "",
      })
    }
  }

  // Validate form before submission
  const validateForm = () => {
    const newErrors = {}

    if (!editableFields.outTime) {
      newErrors.outTime = "Out Time is required"
    }

    if (!editableFields.authorizedSignatory) {
      newErrors.authorizedSignatory = "Authorized Signatory is required"
    }

    if (!editableFields.addFacility) {
      newErrors.addFacility = "Facility is required"
    }

    if (!signatureData) {
      newErrors.eSignature = "E-Signature is required"
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  // Handle form submission
  const handleSubmit = (e) => {
    e.preventDefault()

    if (validateForm()) {
      setIsSubmitting(true)
      setSubmitMessage("")

      // Mock API call - replace with your actual API endpoint
      setTimeout(() => {
        setSubmitMessage("Entry updated successfully!")
        setIsSubmitting(false)
      }, 1000)
    }
  }

  // Signature pad handlers
  const startDrawing = (e) => {
    const canvas = e.target
    const ctx = canvas.getContext("2d")
    ctx.beginPath()
    ctx.moveTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY)
    setIsDrawing(true)
  }

  const draw = (e) => {
    if (!isDrawing) return
    const canvas = e.target
    const ctx = canvas.getContext("2d")
    ctx.lineWidth = 2
    ctx.lineCap = "round"
    ctx.strokeStyle = "black"
    ctx.lineTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY)
    ctx.stroke()
  }

  const stopDrawing = (e) => {
    if (isDrawing) {
      const canvas = e.target
      setSignatureData(canvas.toDataURL())
      setIsDrawing(false)
    }
  }

  const clearSignature = () => {
    const canvas = document.getElementById("signatureCanvas")
    const ctx = canvas.getContext("2d")
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    setSignatureData(null)
  }

  return (
    <div className="flex flex-col items-center bg-gray-100 p-4">
      <div className="w-full max-w-7xl">
        {/* Visitor Details Card */}
        <div className="mb-6 bg-white rounded-lg shadow-sm border border-gray-200">
          <div className="p-3 border-b border-gray-200">
            <h2 className="text-center font-bold text-gray-800 text-lg">VISITOR DETAILS</h2>
          </div>
          <div className="p-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-4">
              <div className="space-y-1">
                <label className="block text-sm text-gray-700">
                  <span className="text-red-500">*</span>Visitor Type
                </label>
                <input
                  type="text"
                  value={visitorDetails.visitorType}
                  disabled
                  className="w-full p-2 bg-gray-100 border border-gray-300 rounded h-10"
                />
              </div>
              <div className="space-y-1">
                <label className="block text-sm text-gray-700">Visitor ID</label>
                <input
                  type="text"
                  value={visitorDetails.visitorId}
                  disabled
                  className="w-full p-2 bg-gray-100 border border-gray-300 rounded"
                />
              </div>
              <div className="space-y-1">
                <label className="block text-sm text-gray-700">
                  <span className="text-red-500">*</span>Visitor Name
                </label>
                <input
                  type="text"
                  value={visitorDetails.visitorName}
                  disabled
                  className="w-full p-2 bg-gray-100 border border-gray-300 rounded"
                />
              </div>
              <div className="space-y-1">
                <label className="block text-sm text-gray-700">
                  <span className="text-red-500">*</span>Purpose of Visit
                </label>
                <input
                  type="text"
                  value={visitorDetails.purposeOfVisit}
                  disabled
                  className="w-full p-2 bg-gray-100 border border-gray-300 rounded"
                />
              </div>
              <div className="space-y-1">
                <label className="block text-sm text-gray-700">
                  <span className="text-red-500">*</span>Phone Number
                </label>
                <input
                  type="text"
                  value={visitorDetails.phoneNumber}
                  disabled
                  className="w-full p-2 bg-gray-100 border border-gray-300 rounded"
                />
              </div>
              <div className="space-y-1">
                <label className="block text-sm text-gray-700">Email</label>
                <input
                  type="text"
                  value={visitorDetails.email}
                  disabled
                  className="w-full p-2 bg-gray-100 border border-gray-300 rounded"
                />
              </div>
              <div className="space-y-1">
                <label className="block text-sm text-gray-700">Date</label>
                <input
                  type="text"
                  value={visitorDetails.date}
                  disabled
                  className="w-full p-2 bg-gray-100 border border-gray-300 rounded"
                />
              </div>
              <div className="space-y-1">
                <label className="block text-sm text-gray-700">In Time</label>
                <input
                  type="text"
                  value={visitorDetails.inTime}
                  disabled
                  className="w-full p-2 bg-gray-100 border border-gray-300 rounded"
                />
              </div>
            </div>
          </div>
        </div>

        {/* Edit Entry Card */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200">
          <div className="p-3 border-b border-gray-200">
            <h2 className="text-center font-bold text-gray-800 text-lg">EDIT ENTRY</h2>
          </div>
          <div className="p-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-4">
              <div className="space-y-1">
                <label className="block text-sm text-gray-700">
                  <span className="text-red-500">*</span>Authorized Signatory
                </label>
                <input
                  type="text"
                  name="authorizedSignatory"
                  value={editableFields.authorizedSignatory}
                  onChange={handleChange}
                  className={`w-full p-2 border rounded h-10 ${errors.authorizedSignatory ? 'border-red-500' : 'border-gray-300'}`}
                />
                {errors.authorizedSignatory && (
                  <p className="text-red-500 text-xs">{errors.authorizedSignatory}</p>
                )}
              </div>
              
              <div className="space-y-1">
                <label className="block text-sm text-gray-700">
                  <span className="text-red-500">*</span>Out Time
                </label>
                <input
                  type="time"
                  name="outTime"
                  value={editableFields.outTime}
                  onChange={handleChange}
                  className={`w-full p-2 border rounded h-10 ${errors.outTime ? 'border-red-500' : 'border-gray-300'}`}
                />
                {errors.outTime && (
                  <p className="text-red-500 text-xs">{errors.outTime}</p>
                )}
              </div>
              
              <div className="space-y-1">
                <label className="block text-sm text-gray-700">
                  <span className="text-red-500">*</span>Add Facility
                </label>
                <select
                  name="addFacility"
                  value={editableFields.addFacility}
                  onChange={handleChange}
                  className={`w-full p-2 border rounded h-10 ${errors.addFacility ? 'border-red-500' : 'border-gray-300'} bg-white`}
                >
                  <option value="" disabled>Select facility</option>
                  <option value="bangalore">Bangalore</option>
                  <option value="trivandrum">Trivandrum</option>
                  <option value="kochi">Kochi</option>
                </select>
                {errors.addFacility && (
                  <p className="text-red-500 text-xs">{errors.addFacility}</p>
                )}
              </div>
              
              <div className="space-y-1">
                <label className="block text-sm text-gray-700">
                  <span className="text-red-500">*</span>E-Signature
                </label>
                <div className="border border-gray-300 rounded p-2 bg-white">
                  <canvas
                    id="signatureCanvas"
                    width="300"
                    height="100"
                    className={`w-full border rounded ${errors.eSignature ? 'border-red-500' : 'border-gray-300'}`}
                    onMouseDown={startDrawing}
                    onMouseMove={draw}
                    onMouseUp={stopDrawing}
                    onMouseLeave={stopDrawing}
                  ></canvas>
                  <button
                    type="button"
                    onClick={clearSignature}
                    className="mt-2 px-3 py-1 text-sm border border-gray-300 rounded bg-white"
                  >
                    Clear
                  </button>
                </div>
                {errors.eSignature && (
                  <p className="text-red-500 text-xs">{errors.eSignature}</p>
                )}
              </div>
            </div>
            
            {submitMessage && (
              <div className={`mt-4 p-3 rounded ${submitMessage.includes("Error") ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700'}`}>
                {submitMessage}
              </div>
            )}
            
            <div className="flex justify-center gap-4 mt-6">
              <button
                onClick={handleSubmit}
                disabled={isSubmitting}
                className="bg-gray-800 text-white px-6 py-1.5 rounded-full hover:bg-blue-900 disabled:opacity-70 text-sm"
              >
                {isSubmitting ? "Updating..." : "Update"}
              </button>
              <button
                type="button"
                className="bg-gray-800 text-white px-6 py-1.5 rounded-full hover:bg-gray-900 text-sm"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
